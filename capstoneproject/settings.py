"""
Django settings for capstoneproject project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import environ

# Firebase admin SDK is optional in some environments (avoid crashing if not installed)
try:
    import firebase_admin
    from firebase_admin import credentials
    FIREBASE_SDK_AVAILABLE = True
except Exception:
    firebase_admin = None
    credentials = None
    FIREBASE_SDK_AVAILABLE = False

# Initialize environment variables
env = environ.Env()
environ.Env.read_env()




# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# read SECRET_KEY from environment; fall back to the development key if missing
SECRET_KEY = env('SECRET_KEY', default='django-insecure-yqxz7hc*l+ebnk8^sa4%8=7$h0-jzp=t+uw$8f2ad)x+0t#bin')

DEBUG = env.bool('DEBUG', default=False)
ALLOWED_HOSTS = ['.onrender.com', 'localhost', '127.0.0.1']



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'dashboardapp',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # WhiteNoise should come right after SecurityMiddleware to serve static files
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'capstoneproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'capstoneproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        # Allow DATABASE_URL to override with a managed DB on Render; fallback to sqlite for local dev
        **env.db(default=f"sqlite:///{BASE_DIR / 'db.sqlite3'}")
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
# Where `collectstatic` will collect static files for production
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Use WhiteNoise to serve static files on Render
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Source static files directory (where your app's static files live during development)
STATICFILES_DIRS = [BASE_DIR / 'static']

# Ensure the source static directory exists so collectstatic and checks don't warn
try:
    (BASE_DIR / 'static').mkdir(parents=True, exist_ok=True)
except Exception:
    pass


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Firebase configuration
# Firebase configuration - allow JSON credentials via environment for Render
# Only attempt initialization when the Firebase admin SDK is available
if FIREBASE_SDK_AVAILABLE:
    try:
        # If user provided credentials JSON via env var, write to firebase-key.json at startup
        FIREBASE_JSON = env('FIREBASE_CREDENTIALS_JSON', default=None)
        cred_path = BASE_DIR / 'firebase-key.json'
        if FIREBASE_JSON:
            try:
                # write or overwrite the file so firebase_admin can read it
                cred_path.write_text(FIREBASE_JSON)
            except Exception as e:
                # log to stdout so Render logs capture it
                print(f"Unable to write firebase-key.json from env: {e}")

        # initialize firebase if credentials file exists
        if cred_path.exists():
            try:
                cred = credentials.Certificate(str(cred_path))
                if not firebase_admin._apps:
                    firebase_admin.initialize_app(cred)
            except Exception as e:
                # invalid credentials file or initialization error
                print(f"Firebase initialization error: {e}")
        else:
            # not fatal; just warn
            print(f"Firebase key not found at {cred_path}; Firestore features will be disabled.")
    except Exception as e:
        # Keep application booting even if firebase is missing in the environment
        print(f"Firebase initialization error: {e}")
else:
    # SDK not installed â€” print a warning (handlers that call firestore.client must check availability)
    print("firebase_admin SDK not available; Firestore features will be disabled.")

# Add basic logging so unhandled exceptions and prints appear in Render logs
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}

# Django auth redirects
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/login/'

# Security settings for proxies / render
# honor X-Forwarded-Proto for secure requests when behind a proxy
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Secure cookies in production
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG

# Optional: enforce HTTPS in production via environment toggle
SECURE_SSL_REDIRECT = env.bool('SECURE_SSL_REDIRECT', default=not DEBUG)





